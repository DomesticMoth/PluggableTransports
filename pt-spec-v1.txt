          Cпецификация Подключаемого Транспорта (Версия 1)

Аннотация

Подключаемые Транспорты (Pluggable Transport далее PT) представляют собой 
универсальный механизм для быстрой разработки и развертывания средств 
обхода цензуры, основанный на идее модульных подпроцессов, которые 
преобразуют трафик, чтобы обойти цензуру.

Этот документ описывает механизмы запуска, завершения подпроцесса и 
взаимодействия между процессами, необходимые для использования PTs.

Содержание

   1. Введение
      1.1. Обозначение терминологии
   2. Обзор архитектуры
   3. Спецификация
      3.1. Именование Подключаемых Транспортов
      3.2. Переменные среды конфигурирующие Подключаемый Транспорт
           3.2.1. Общие переменные среды
           3.2.2. Переменные среды для клиента
           3.2.3. Переменные среды для сервера
      3.3. Связь Подключаемого Транспорта с родительским процессом
           3.3.1. Общие сообщения
           3.3.2. Сообщения клиента
           3.3.3. Сообщения сервера
           3.3.4. Сообщения логов
           3.3.5. Сообщения статуса
      3.4. Выключение Подключаемого Транспорта
      3.5. Аргументы для каждого клиентского подключения
   4. Соображения анонимности
   5. Ссылки
   6. Благодарности
   Приложение A. Пример клиентской сессии Подключаемого Транспорта
   Приложение B. Пример серверной сессии Подключаемого Транспорта
   Примечание переводчика

1. Введение

   Эта спецификация описывает способ отделения обфускации уровня 
   протокола от клиентского/серверного кода приложения таким образом, 
   чтобы способствовать быстрой разработке инструментов обфускации/
   обхода и способствовать повторному использованию в этой области за 
   пределами проекта Tor.

   Это достигается за счет использования вспомогательных подпроцессов 
   с четко определенной и стандартизированной конфигурацией и 
   интерфейсом управления, которые реализуют прямые/обратные 
   прокси-серверы, выполняющие обход цензуры.

   Любое приложение, которое реализует интерфейсы, указанные в этом 
   документе, сможет использовать все подключаемые транспорты, 
   совместимые с данной спецификацией.

1.1. Обозначение терминологии

   Ключевые слова "НЕОБХОДИМО"(MUST), "НЕДОПУСТИМО"(MUST NOT), 
   "СЛЕДУЕТ"(SHOULD), "НЕ СЛЕДУЕТ"(SHOULD NOT), 
   "РЕКОМЕНДУЕТСЯ"(RECOMMENDED), "МОЖЕТ"(MAY), "ОПЦИОНАЛЬНО"(OPTIONAL) в 
   этом документе должны пониматься как описанно в [RFC 2119].

2. Обзор архитектуры

     +------------+                    +-----------------------------+
     |     КП     +--------- ЛИ -------+   PT Клиент (SOCKS Прокси)  +--+
     +------------+                    +-----------------------------+  |
                                                                        |
                   Public Internet (Obfuscated/Transformed traffic) ==> |
                                                                        |
     +------------+                    +-----------------------------+  |
     |     СП     +--------- ЛИ -------+ PT Сервер (Обратное Прокси) +--+
     +------------+                    +-----------------------------+
               Легенда:
                  КП - клиентское приложение
                  СП - серверное приложение
                  ЛИ - локальный интерфейс
                  PT - Подключаемый транспорт

   На хосте клиента программное обеспечение PT предоставляет
   клиентскому приложению прокси-сервер SOCKS [RFC 1928]
   и обфусцирует или иным образом преобразует трафик
   перед его пересылкой на хост сервера.
      
   На хосте сервера программное обеспечение PT предоставляет
   обратный прокси, который принимает соединения от клиентов PT
   и снимает слой обфускации/преобразования, применяемого к трафику,
   прежде чем перенаправлять его на фактическое ПО сервера.
   Также существует дополнительный облегченный протокол для передачи
   метаданных соединения, таких как IP-адрес и порт источника,
   которые в противном случае были бы потеряны.

   Все экземпляры PT настраиваются соответствующим родительским
   процессом с помощью набора стандартизированных переменных
   среды (3.2), которые устанавливаются во время запуска,
   и сообщают информацию о состоянии обратно родительскому процессу
   посредством записи выходных данных в стандартизированном
   формате в stdout (3.3).

   Каждый запускаемый PT ДОЛЖЕН быть либо клиентом, либо сервером.

   Все прямые клиентские PT ДОЛЖНЫ поддерживать либо SOCKS4,
   либо SOCKS5 и ДОЛЖНЫ отдавать предпочтение SOCKS5, а не SOCKS 4.

3. Спецификация

Подключаемые Транспорты следуют представленному рабочему процессу на
протяжении всего временеи жизни.


   1) Родительский процесс устанавливает переменные среды окружения (3.2) 
   и запускает Подключаемый Транспорт как подпроцесс (вызов 
   fork()/exec()).

   2) Прокси сервер PT определяет версии спецификации PT, поддерживаемые 
   родительским процессом "TOR_PT_MANAGED_TRANSPORT_VER" (3.2.1).

      2.1) Если совместимых версий нет, PT записывает сообщение 
      "VERSION-ERROR" (3.3.1) в stdout и завершает работу.

      2.2) Если существует совместимая версия, PT записывает сообщение 
      "VERSION" (3.3.1) в stdout.

   3) PT парсит остальные переменные среды.

      3.1) Если значения среды некорректны или иным образом недопустимы, 
      прокси-сервер PT записывает сообщение "ENV-ERROR" (3.3.1) в stdout 
      и завершает работу.

      3.2) Определить, является ли этт транспорт прямым прокси на стороне 
      клиента или обратным прокси на стороне сервера, можно, по 
      переменным среды "TOR_PT_CLIENT_TRANSPORTS" и 
      "TOR_PT_SERVER_TRANSPORTS".

   4) (Только для клиента) Если существует вышестоящий прокси-сервер, 
   указанный через "TOR_PT_PROXY" (3.2.2), PT проверяет предоставленный 
   URI.

      4.1) Если вышестоящий прокси-сервер непригоден для использования, 
      PT записывает сообщение "PROXY-ERROR" (3.3.2) в stdout и завершает 
      работу.

      4.2) Если предоставлен работоспособный вышестоящий прокси-сервер, 
      PT записывает сообщение "PROXY DONE" (3.3.2) в stdout.

   5) PT инициализирует транспорты и сообщает о состоянии через stdout 
   (3.3.2, 3.3.3).

   6) PT перенаправляет и преобразует трафик соответствующим образом.

   7) После получения сигнала о завершении от родительского процесса 
   (3.4) PT мягко завершает работу.

3.1. Именование Подключаемых Транспортов

   Имена Подключаемых Транспортов служат уникальными идентификаторами, и 
   каждый PT ДОЛЖЕН(MUST) иметь уникальное имя.

   Имена PT ДОЛЖНЫ(MUST) быть допустимыми идентификаторами C. Имена PT 
   ДОЛЖНЫ(MUST) начинаться с буквы или символа подчеркивания, а остальные 
   символы ДОЛЖНЫ(MUST) быть буквами ASCII, цифрами или символами 
   подчеркивания.  Ограничение по длине не вводится.

   Имена PT ДОЛЖНЫ(MUST) удовлетворять регулярному выражению 
   "[a-zA-Z_][a-zA-Z0-9_]*".

3.2. Переменные среды конфигурирующие Подключаемый Транспорт

   Все экземпляры PT настраиваются их родительским процессом во время 
   запуска с помощью набора явно определенных переменных среды.

   Префикс "TOR_PT_" используется по соображениям пространства имен и не 
   указывает на какие-либо отношения к Tor, за исключением происхождения 
   этой спецификации.

3.2.1. Общие переменные среды

   При запуске подключаемого транспорта (клиента или сервера) 
   родительский процесс ДОЛЖЕН(MUST) задать следующие общие переменные 
   среды.

   "TOR_PT_MANAGED_TRANSPORT_VER"

      Указывает версии спецификации PT, поддерживаемые родительским 
      процессом, разделенные запятыми. Все PT ДОЛЖНЫ(MUST) принимать 
      любой правильно сформированный список, если присутствует 
      совместимая версия.

      Допустимые версии ДОЛЖНЫ(MUST) полностью состоять из символов 
      ASCII, не содержащих пробелов и не разделяемых запятыми.

      Версия спецификации PT настоящего документа равна "1".

         Пример:

            TOR_PT_MANAGED_TRANSPORT_VER=1,1a,2b,this_is_a_valid_ver

   "TOR_PT_STATE_LOCATION"

      Указывает абсолютный путь к каталогу, в котором PT разрешено 
      сохранять состояние, которое будет сохраняться при всех вызовах.  
      Каталог не обязательно должен существовать при запуске PT, однако 
      СЛЕДУЕТ(SHOULD)предоставлять реализациям PT возможность создавать 
      его по мере необходимости.

      PT ДОЛЖЕН(MUST) хранить файлы только по указанному пути и НЕ ДОЛЖЕН 
      (MUST NOT) создавать или изменять файлы в других местах системы.

       Пример:

            TOR_PT_STATE_LOCATION=/var/lib/tor/pt_state/

   "TOR_PT_EXIT_ON_STDIN_CLOSE"

      Указывает, что родительский процесс закроет поток стандартного 
      ввода (stdin) PT, чтобы указать, что PT должен мягко завершиться.

      PT НЕ ДОЛЖЕН(MUST NOT) рассматривать закрытый stdin как сигнал к 
      завершению, если только для этой переменной среды не установлено 
      значение "1".

      PT ДОЛЖЕН(MUST) рассматривать закрытие stdin как сигнал к 
      корректному завершению, если для этой переменной среды установлено 
      значение "1".

         Пример:

            TOR_PT_EXIT_ON_STDIN_CLOSE=1

   "TOR_PT_OUTBOUND_BIND_ADDRESS_V4"

      Указывает IP-адрес IPv4, который PT СЛЕДУЕТ(SHOULD) использовать в 
      качестве адреса источника для исходящих IPv4 IP-пакетов. Эта 
      функция позволяет пользователям с несколькими сетевыми интерфейсами 
      явно указывать, какой интерфейс они предпочитают использовать.

      Если это значение не задано или пусто, прокси-сервер PT 
      ДОЛЖЕН(MUST) использовать исходный адрес по умолчанию для исходящих 
      подключений.

      Этот параметр ДОЛЖЕН(MUST) игнорироваться для подключений к 
      loopback адресам (127.0.0.0/8).

         Пример:

            TOR_PT_OUTBOUND_BIND_ADDRESS_V4=203.0.113.4

   "TOR_PT_OUTBOUND_BIND_ADDRESS_V6"

      Указывает IP-адрес IPv6, который PT СЛЕДУЕТ(SHOULD) использовать в 
      качестве адреса источника для исходящих IPv6 IP-пакетов. Эта 
      функция позволяет пользователям с несколькими сетевыми интерфейсами 
      явно указывать, какой интерфейс они предпочитают использовать.

      Если это значение не задано или пусто, PT ДОЛЖЕН(MUST) использовать 
      исходный адрес по умолчанию для исходящих подключений.

      Этот параметр ДОЛЖЕН(MUST) игнорироваться для подключений к 
      loopback адресам ([::1]).

      Адреса IPv6 всегда должны быть заключены в квадратные скобки.

         Пример:

            TOR_PT_OUTBOUND_BIND_ADDRESS_V6=[2001:db8::4]

3.2.2. Переменные среды для клиента

   PT на клиентской стороне настраиваются следующими переменными среды.

   "TOR_PT_CLIENT_TRANSPORTS"

      Указывает протоколы PT, которые должен инициализировать клиентский 
      прокси-сервер, в виде списка имен PT, разделенных запятыми.

      PT СЛЕДУЕТ(SHOULD) игнорировать имена транспортов, которые он не 
      распознает.

      Родительские процессы ДОЛЖНЫ(MUST) устанавливать эту переменную 
      среды при запуске экземпляра PT на стороне клиента.

         Пример:

            TOR_PT_CLIENT_TRANSPORTS=obfs2,obfs3,obfs4

   "TOR_PT_PROXY"

      Указывает вышестоящий прокси-сервер, который PT ДОЛЖЕН(MUST) 
      использовать при выполнении исходящих сетевых подключений в формате 
      URI [RFC3986]:

         <proxy_type>://[<user_name>[:<password>][@]<ip>:<port>.

      Переменная среды "TOR_PT_PROXY" является НЕОБЯЗАТЕЛЬНОЙ(OPTIONAL) и 
      ДОЛЖНА(MUST) быть опущена, если нет необходимости подключаться 
      через вышестоящий прокси-сервер.

         Примеры:

            TOR_PT_PROXY=socks5://tor:test1234@198.51.100.1:8000
            TOR_PT_PROXY=socks4a://198.51.100.2:8001
            TOR_PT_PROXY=http://198.51.100.3:443

3.2.3. Переменные среды для сервера

   Обратные PT прокси на стороне сервера настраиваются с помощью 
    следующих переменных среды.

   "TOR_PT_SERVER_TRANSPORTS"

      Указывает транспорты, которые должен инициализировать PT, в виде 
      списка имен, разделенных запятыми.

      PT СЛЕДУЕТ(SHOULD) игнорировать имена транспортов, которые он не 
      распознает.

      Родительские процессы ДОЛЖНЫ(MUST) устанавливать эту переменную 
      среды при запуске экземпляра обратного прокси PT на стороне сервера.

         Пример:

            TOR_PT_SERVER_TRANSPORTS=obfs3,scramblesuit

   "TOR_PT_SERVER_TRANSPORT_OPTIONS"

      Задает директивы конфигурации протокола для каждого транспорта в 
      виде списка пар <ключ>:<значение>, разделенных точкой с запятой, 
      где <ключ> - это имя транспорта, а <значение> - строковое значение 
      k=v с параметрами, которые должны быть переданы транспорту.

      Двоеточия, точки с запятой и обратные косые черты ДОЛЖНЫ(MUST) быть 
      экранированы обратной косой чертой.

      Если нет аргументов, которые необходимо передать какому-либо из 
      транспортных протоколов PT, "TOR_PT_SERVER_TRANSPORT_OPTIONS"
      МОЖЕТ(MAY) быть опущен.

         Пример:

            TOR_PT_SERVER_TRANSPORT_OPTIONS=scramblesuit:key=banana;automata:rule=110;automata:depth=3

            Передаст в 'scramblesuit' параметр 'key=banana',
            а в 'automata' - аргументы 'rule=110' и 'depth=3'.

   "TOR_PT_SERVER_BINDADDR"

      Разделенный запятыми список пар <ключ>-<значение>, где <ключ> - это 
      имя транспорта, а <значение> - это <адрес>:<порт>, на котором он 
      должен прослушивать входящие клиентские соединения.

      Ключи, содержащие имена транспорта, ДОЛЖНЫ(MUST) располагаться в 
      том же порядке, в каком они отображаются в 
      "TOR_PT_SERVER_TRANSPORTS".

      <Адрес> МОЖЕТ(MAY) быть локальным адресом, если переадресация 
      портов выполняется извне.

      Комбинация <адрес>:<порт> ДОЛЖНА(MUST) быть IP-адресом, 
      поддерживаемым `bind()`, и НЕ ДОЛЖНА(MUST NOT) быть именем хоста.

      Приложения НЕ ДОЛЖНЫ(MUST NOT) устанавливать более одной пары 
      <адрес>:<порт> для каждого имени PT.

      Если нет конкретной комбинации <адрес>:<порт>, указанной для какого 
      либо транспорта, "TOR_PT_SERVER_BINDADDR" МОЖЕТ(MAY) быть опущен.

         Пример:

            TOR_PT_SERVER_BINDADDR=obfs3-198.51.100.1:1984,scramblesuit-127.0.0.1:4891

   "TOR_PT_ORPORT"

      Указывает адрес назначения, на который обратный прокси PT
      должен перенаправлять трафик после его преобразования
      соответствующим образом, в формате <адрес>:<порт>.

      Соединения с адресом назначения, указанным через "TOR_PT_ORPORT",
      ДОЛЖНЫ(MUST) содержать только полезную нагрузку приложения.
      Если родительскому процессу требуется фактический IP-адрес
      источника клиентских подключений (или другие метаданные),
      вместо этого он должен установить "TOR_PT_EXTENDED_SERVER_PORT".

         Пример:

            TOR_PT_ORPORT=127.0.0.1:9001

   "TOR_PT_EXTENDED_SERVER_PORT"

      Указывает адрес назначения, на который обратный прокси PT должен 
      перенаправлять трафик через расширенный протокол ORPort [EXTORPORT] 
      в формате <адрес>:<порт>.

      Расширенный протокол ORPort позволяет обратному прокси PT 
      передавать метаданные для каждого соединения, такие как имя имя 
      транспорта и IP-адрес/порт клиента, родительскому процессу.

      Если родительский процесс не поддерживает протокол ExtORPort, он 
      ДОЛЖЕН(MUST) установить "TOR_PT_EXTENDED_SERVER_PORT" в пустую 
      строку.

         Пример:

            TOR_PT_EXTENDED_SERVER_PORT=127.0.0.1:4200

   "TOR_PT_AUTH_COOKIE_FILE"

      Указывает абсолютный путь к файловой системе для расширенного файла 
      cookie аутентификации ORPort, необходимого для связи с расширенным 
      ORPort, указанным через "TOR_PT_EXTENDED_SERVER_PORT".

      Если родительский процесс не использует протокол Exorport для 
      входящего трафика, "TOR_PT_AUTH_COOKIE_FILE" ДОЛЖЕН(MUST) быть 
      опущен.

         Пример:

            TOR_PT_AUTH_COOKIE_FILE=/var/lib/tor/extended_orport_auth_cookie

3.3. Связь Подключаемого Транспорта с родительским процессом

   Все подключаемые транспортные прокси-серверы взаимодействуют с
   родительским процессом посредством записи строк с NL-завершением в stdout.
   Метаформат строки следующий:

      <Line> ::= <Keyword> <OptArgs> <NL>
      <Keyword> ::= <KeywordChar> | <Keyword> <KeywordChar>
      <KeywordChar> ::= <any US-ASCII alphanumeric, dash, and underscore>
      <OptArgs> ::= <Args>*
      <Args> ::= <SP> <ArgChar> | <Args> <ArgChar>
      <ArgChar> ::= <any US-ASCII character but NUL or NL>
      <SP> ::= <US-ASCII whitespace symbol (32)>
      <NL> ::= <US-ASCII newline (line feed) character (10)>

   Родительский процесс ДОЛЖЕН(MUST) игнорировать строки, полученные от
   прокси PT с неизвестными ключевыми словами.

3.3.1. Общие сообщения

Когда прокси PT запускается впервые, он должен определить, какую версию
спецификации подключаемых транспортных средств использовать для
собственной настройки.

Он делает это с помощью переменной среды
"TOR_PT_MANAGED_TRANSPORT_VER"(3.2.1), которая содержит все версии,
поддерживаемые приложением.

После определения используемой версии или ее отсутствия прокси-сервер PT
отвечает одним из двух сообщений.

   VERSION-ERROR <ErrorMessage>

      Сообщение "VERSION-ERROR" используется для указания на то, что в 
      списке "TOR_PT_MANAGED_TRANSPORT_VER" отсутствует совместимая 
      версия спецификации PT.

      Для <ErrorMessage> СЛЕДУЕТ(SHOULD) установить значение "no-version" 
      по историческим причинам, но вместо этого МОЖЕТ(MAY) быть 
      установлено полезное сообщение об ошибке.

      Прокси PT ДОЛЖНЫ завершиться после вывода сообщения "VERSION-ERROR".

          Пример:

            VERSION-ERROR no-version

   VERSION <ProtocolVersion>

      Сообщение "VERSION" используется для указания версии спецификации 
      PT (как в "TOR_PT_MANAGED_TRANSPORT_VER"), которую прокси PT будет 
      использовать для настройки своих транспортов и взаимодействия с 
      родительским процессом.

      Версия для значений среды и ответных сообщений, указанных в этом 
      документе, равна "1".

      Прокси-серверы PT ДОЛЖНЫ(MUST) либо сообщить об ошибке и завершить 
      работу, либо вывести сообщение "VERSION", прежде чем переходить к 
      инициализации и настройке клиентского/серверного прокси.

          Пример:

            VERSION 1

После завершения согласования версии прокси PT должен проверить, что все 
требуемые переменные среды предоставлены и что все предоставленные 
значения конфигурации правильно сформированы.

В любой момент, если возникает ошибка, связанная с конфигурацией, 
предоставленной через переменные среды, он МОЖЕТ(MAY) ответить сообщением 
об ошибке и завершиться.

   ENV-ERROR <ErrorMessage>

      Сообщение "ENV-ERROR" используется для сигнализации о том, что 
      прокси-сервер PT не смог получить конфигурацию из переменных 
      среды(3.2).

      Сообщению <ErrorMessage> СЛЕДУЕТ(SHOULD) состоять из полезного 
      сообщения об ошибке, которое можно использовать для диагностики и 
      устранения основной причины сбоя.

      Прокси PT ДОЛЖНЫ(MUST) завершиться после вывода сообщения "ENV-ERROR".

         Пример:

            ENV-ERROR No TOR_PT_AUTH_COOKIE_FILE when TOR_PT_EXTENDED_SERVER_PORT set

3.3.2. Сообщения клиента

После согласования версии спецификации прокси PT на клиентской стороне 
ДОЛЖЕН(MUST) сначала проверить установленна ли переменная "TOR_PT_PROXY" 
(3.2.2) перед инициализацией любых перевозок.

Предполагая, что предоставляется вышестоящий прокси-сервер, клиентские 
прокси PT ДОЛЖНЫ(MUST) ответить сообщением, указывающим, что 
прокси-сервер действителен, поддерживается и будет использоваться, ИЛИ 
сообщением об ошибке.

   PROXY DONE

      Сообщение "PROXY DONE" используется для сообщения о
      принятии прокси-сервером PT вышестоящего прокси-сервера,
      указанного в "TOR_PT_PROXY".

   PROXY-ERROR <ErrorMessage>

      Сообщение "PROXY-ERROR" используется для сообщения о том, что 
      вышестоящий прокси-сервер описан в неправильном виде/не 
      поддерживается или иным образом непригоден для использования.

      Прокси-серверы PT ДОЛЖНЫ(MUST) завершаться немедленно после вывода 
      сообщения "PROXY-ERROR".

         Пример:

            PROXY-ERROR SOCKS 4 upstream proxies unsupported.

После настройки вышестоящего прокси-сервера (если таковой имеется) 
клиенты PT затем перебирают запрошенные транспорты в 
"TOR_PT_CLIENT_TRANSPORTS" и инициализируют слушателей.

Для каждого инициализированного транспорта прокси-сервер PT сообщает
родительскому процессу о состоянии слушателя через сообщения в stdout.

   CMETHOD <transport> <'socks4','socks5'> <address:port>

      Сообщение "CMETHOD" используется для сигнализации о запуске 
      запрошенного транспорта, который родительский процесс должен 
      использовать для установления исходящих соединений, а также для 
      передачи IP-адреса и порта, которые прослушивает прямой 
      прокси-сервер транспорта PT.

         Пример:

            CMETHOD trebuchet socks5 127.0.0.1:19999

   CMETHOD-ERROR <transport> <ErrorMessage>

      Сообщение "CMETHOD-ERROR" используется для сигнализации о том, что 
      запрошенный транспорт PT не удалось запустить.

         Пример:

            CMETHOD-ERROR trebuchet no rocks available

Как только все передачи PT будут инициализированы (или завершены с 
ошибкой), прокси-сервер PT ДОЛЖЕН(MUST) отправить окончательное 
сообщение, указывающее, что он завершил инициализацию.

   CMETHODS DONE

      Сообщение "CMETHODS DONE" сигнализирует о том, что прокси-сервер PT 
      завершил инициализацию всех транспортов, которые он способен 
      обрабатывать.

После отправки сообщения "CMETHODS DONE" инициализация прокси-сервера PT 
завершена.

Notes:

 - Неизвестные транспорты в "TOR_PT_CLIENT_TRANSPORTS" полностью 
   игнорируются и НЕ ДОЛЖНЫ(MUST NOT) приводить к сообщению 
   "CMETHOD-ERROR". Таким образом, вполне возможно, что прокси-сервер PT 
   немедленно выдаст "CMETHODS DONE".

 - Родительские процессы ДОЛЖНЫ(MUST) обрабатывать сообщения 
   "CMETHOD"/"CMETHOD-ERROR" в любом порядке, независимо от порядка в 
   "TOR_PT_CLIENT_TRANSPORTS".

3.3.3. Сообщения сервера

   Обратные прокси PT перебирают запрошенные транспорты в 
   "TOR_PT_CLIENT_TRANSPORTS" и инициализируют слушателей.

   Для каждого инициализированного транспорта прокси PT сообщает 
   родительскому процессу о состоянии слушателя через сообщения в stdout.

      SMETHOD <transport> <address:port> [options]

         Сообщение "SMETHOD" используется для сигнализации о запуске 
         запрошенного транспорта PT, протокола, который будет 
         использоваться для обработки входящих подключений, а также для 
         передачи IP-адреса и порта, которые клиенты должны использовать 
         для доступа к обратному прокси-серверу.

         Если для данного PT-транспорта предусмотрен определенный
         <адрес:порт> через "TOR_PT_SERVER_BINDADDR", транспорт
         ДОЛЖЕН(MUST) быть инициализирован с использованием этого адреса 
         в качестве адреса сервера.

         НЕОБЯЗАТЕЛЬНОЕ(OPTIONAL) поле "параметры" используется для 
         передачи дополнительной информации для каждого транспорта 
         обратно родительскому процессу.

         В настоящее время принятыми "вариантами" являются:

            ARGS:[<Key>=<Value>,]+[<Key>=<Value>]

               Опция "ARGS" используется для передачи дополнительной 
               информации в формате ключ/значение, которая потребуется 
               клиентам для использования обратного прокси-сервера.

               Знаки равенства и запятые ДОЛЖНЫ(MUST) быть экранированы 
               обратной косой чертой.

               Tor: Аргументы включены в транспортную строку 
               дополнительного информационного документа моста.

            Примеры:

               SMETHOD trebuchet 198.51.100.1:19999
               SMETHOD rot_by_N 198.51.100.1:2323 ARGS:N=13

      SMETHOD-ERROR <transport> <ErrorMessage>

         Сообщение "SMETHOD-ERROR" используется для сигнализации о том, 
         что запрошенный обратный прокси-сервер PT transport не удалось 
         запустить.

         Пример:

            SMETHOD-ERROR trebuchet no cows available

   Как только все передачи PT будут инициализированы (или завершены с 
   ошибкой), прокси-сервер PT ДОЛЖЕН(MUST) отправить окончательное 
   сообщение, указывающее, что он завершил инициализацию.

      SMETHODS DONE

         Сообщение "SMETHODS DONE" сигнализирует о том, что прокси-сервер 
         PT завершил инициализацию всех транспортов, которые он способен 
         обрабатывать.

   После отправки сообщения "SMETHODS DONE" инициализация прокси-сервера 
   PT завершена.

3.3.4. Сообщения логов

   Это сообщение PT, реализует возможность передавать сигналы обратно 
   родительскому процессу через stdout или stderr о любых сообщениях 
   журнала.

   Сообщение журнала может представлять собой любые сообщения (читаемые 
   человеком), которые PT отправляет обратно, чтобы родительский процесс 
   мог собирать информацию о том, что происходит в дочернем процессе. Он 
   предназначен не для того, чтобы родительский процесс анализировал и 
   действовал соответствующим образом, а скорее для простого ведения 
   журнала.

   Например, демон tor разделяет эти сообщения на уровни серьезности и 
   отправляет их на порт управления с помощью PT_LOG
   (см. control-spec.txt ), чтобы любая третья сторона могла забрать их 
   для отладки.

   Формат сообщения:

      LOG SEVERITY=Severity MESSAGE=Message

   Значение SEVERITY указывает, на каком уровне ведения журнала находится 
   сообщение. Допустимыми значениями для <Severity> являются: error, 
   warning, notice, info, debug.

   Значение MESSAGE представляет собой удобочитаемую строку, 
   отформатированную PT. <Message> содержит сообщение журнала, которое 
   может быть строкой или CString (см. раздел 2 в control-spec.txt ).

   Пример:

      LOG SEVERITY=debug MESSAGE="Connected to bridge A"

3.3.5. Сообщения статуса

   Это сообщение дает клиенту или серверу PT иметь возможность
   передавать сигналы родительскому процессу через stdout
   или stderr о любых сообщениях о состоянии.

   Формат сообщения:

      STATUS TRANSPORT=Transport <K_1>=<V_1> [<K_2>=<V_2> ...]

   Значение TRANSPORT указывает на используемый протокол. В качестве 
   примера, obfs4proxy будет использовать "obfs4". Таким образом, 
   транспортным значением может быть все, что определяет сам PT, и это 
   может быть строка или CString (см. раздел 2 в control-spec.txt).

   Значения <K_n>=<V_n> специфичны для PT, и оно должно быть по крайней 
   мере одно. Это сообщение, отражающее статус, о котором PT хочет 
   сообщить. <V_n> может быть строкой или CString.

   Примеры:

      STATUS TRANSPORT=obfs4 ADDRESS=198.51.100.123:1234 CONNECT=Success
      STATUS TRANSPORT=obfs4 ADDRESS=198.51.100.222:2222 CONNECT=Failed FINGERPRINT=<Fingerprint> ERRSTR="Connection refused"
      STATUS TRANSPORT=trebuchet ADDRESS=198.51.100.15:443 PERCENT=42

3.4. Выключение PT

   Рекомендуемый способ завершения работы для подключаемого транспорта 
   заключается в следующем:

      (Родитель) Устанавливает "TOR_PT_EXIT_ON_STDIN_CLOSE" (3.2.1) при 
      запуске PT, чтобы указать, что stdin будет использоваться для 
      уведомления о завершении работы.

      (Родитель) Когда придет время завершить работу прокси-сервера PT:

         1. Закройте stdin прокси-сервера PT.
         2. Подождите "разумное" количество времени для завершения PT.
         3. Попытайтесь использовать специфические для ОС механизмы, 
         чтобы вызвать плавное завершение работы PT (например: 'SIGTERM')
         4. Используйте специфические для ОС механизмы принудительного 
         завершения PT (например: 'SIGKILL', 'ProccessTerminate()').

      Прокси-серверы PT ДОЛЖНЫ отслеживать stdin и корректно завершать 
      работу при его закрытии, если родительский сервер поддерживает 
      такое поведение.

      PT СЛЕДУЕТ(SHOULD) обрабатывать специфичные для ОС механизмы для 
      корректного завершения работы (например: установите обработчик 
      сигналов на 'SIGTERM', который вызывает очистку и корректное 
      завершение работы, если это возможно).

      PT СЛЕДУЕТ(SHOULD) попытаться определить, когда родительский 
      процесс завершается (например, путем обнаружения изменения 
      идентификатора родительского процесса в системах U * IX), и 
      корректно завершить работу.

3.5. Аргументы для каждого клиентского подключения

   Некоторые транспортные протоколы PT требуют, чтобы клиент предоставлял 
   аргументы для каждого соединения при выполнении исходящих 
   подключений.  На стороне сервера это обрабатывается необязательным 
   аргументом "ARGS" как часть сообщения "SMETHOD".

   На стороне клиента аргументы передаются через поля аутентификации, 
   которые являются частью протокола SOCKS.
    
   Сначала аргументы в формате "<Ключ>=<Значение>" ДОЛЖНЫ(MUST) быть 
   экранированы таким образом, чтобы все символы обратной косой черты, 
   знака равенства и точки с запятой экранировались обратной косой чертой.

   Во-вторых, все экранированные данные объединяются вместе.

      Пример:

         shared-secret=rahasia;secrets-file=/tmp/blob

   Наконец, аргументы передаются при установлении исходящего соединения
   с использованием механизма аутентификации, специфичного для
   версии протокола SOCKS.

    - Вслучае SOCKS 4 объединенный список аргументов передается в поле 
      "USERID" запроса "CONNECT".

    - В случае SOCKS 5 родительский процесс должен согласовать 
      аутентификацию "Username/Password" [RFC 1929] и переданные 
      аргументы, закодированные в полях "UNAME" и "PASSWD".

      Если длина закодированного списка аргументов составляет
      менее 255 байт, для поля "PLEN" должно быть установлено
      значение "1", а поле "PASSWD" должно содержать один символ NUL.

4. Соображения анонимности

   При разработке и внедрении подключаемого транспорта следует проявлять
   осторожность, чтобы сохранить конфиденциальность клиентов и избежать
   утечки личной информации.

   Примерами соображений, связанных с клиентом, являются:

    - Не записывать IP-адреса клиентов на диск.

    - Не распространять DNS-адреса, за исключением случаев,
      когда это необходимо.

    - Гарантировать, что поведение "fail closed" для
      "TOR_PT_PROXY" реализовано правильно.

   Кроме того, некоторые механизмы запутывания полагаются на 
   конфиденциальную информацию, такую как IP-адрес/порт сервера, поэтому 
   клиентам также необходимо позаботиться о сохранении конфиденциальности 
   информации на стороне сервера, когда это возможно.

5. Ссылки

   [RFC2119]     Bradner, S., "Key words for use in RFCs to Indicate
                 Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC1928]     Leech, M., Ganis, M., Lee, Y., Kuris, R.,
                 Koblas, D., Jones, L., "SOCKS Protocol Version 5",
                 RFC 1928, March 1996.

   [EXTORPORT]   Kadianakis, G., Mathewson, N., "Extended ORPort and
                 TransportControlPort", Tor Proposal 196, March 2012.

   [RFC3986]     Berners-Lee, T., Fielding, R., Masinter, L., "Uniform
                 Resource Identifier (URI): Generic Syntax", RFC 3986,
                 January 2005.

   [RFC1929]     Leech, M., "Username/Password Authentication for
                 SOCKS V5", RFC 1929, March 1996.

6. Благодарности

Эта спецификация в значительной степени опирается на предыдущие версии,
сделанные Jacob Appelbaum, Nick Mathewson, и George Kadianakis.


Приложение A. Пример клиентской сессии Подключаемого Транспорта

   Переменные среды:

     TOR_PT_MANAGED_TRANSPORT_VER=1
     TOR_PT_STATE_LOCATION=/var/lib/tor/pt_state/
     TOR_PT_EXIT_ON_STDIN_CLOSE=1
     TOR_PT_PROXY=socks5://127.0.0.1:8001
     TOR_PT_CLIENT_TRANSPORTS=obfs3,obfs4

   Сообщения выводимые PT в stdin:

     VERSION 1
     PROXY DONE
     CMETHOD obfs3 socks5 127.0.0.1:32525
     CMETHOD obfs4 socks5 127.0.0.1:37347
     CMETHODS DONE

Приложение B. Пример серверной сессии Подключаемого Транспорта

   Переменные среды:

     TOR_PT_MANAGED_TRANSPORT_VER=1
     TOR_PT_STATE_LOCATION=/var/lib/tor/pt_state
     TOR_PT_EXIT_ON_STDIN_CLOSE=1
     TOR_PT_SERVER_TRANSPORTS=obfs3,obfs4
     TOR_PT_SERVER_BINDADDR=obfs3-198.51.100.1:1984

   Сообщения выводимые PT в stdin:

     VERSION 1
     SMETHOD obfs3 198.51.100.1:1984
     SMETHOD obfs4 198.51.100.1:43734 ARGS:cert=HszPy3vWfjsESCEOo9ZBkRv6zQ/1mGHzc8arF0y2SpwFr3WhsMu8rK0zyaoyERfbz3ddFw,iat-mode=0
     SMETHODS DONE

Примечание переводчика

   Оригинал данной спецификации вы можете найти по адресу 
   https://gitweb.torproject.org/torspec.git/tree/pt-spec.txt

   Файл control-spec.txt на который эта спецификация ссылкается в 
   нескольких местах вы можете увидеть по адресу 
   https://gitweb.torproject.org/torspec.git/tree/control-spec.txt
   По скольку этот файл описывает поведение специфичное конкретно для демона tor, и не относящееся к Pluggable Transport в общем, данный файл в перевод не включен

   Перевод выполнил https://github.com/DomesticMoth
